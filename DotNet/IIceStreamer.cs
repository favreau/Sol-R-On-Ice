// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `IIceStreamer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace Streamer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface BitmapProvider : Ice.Object, BitmapProviderOperations_, BitmapProviderOperationsNC_
    {
    }
}

namespace Streamer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_BitmapProvider_setCamera();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_BitmapProvider_getBitmap(byte[] ret__);
}

namespace Streamer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface BitmapProviderPrx : Ice.ObjectPrx
    {
        void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az);
        void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Streamer.Callback_BitmapProvider_setCamera> begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az);
        Ice.AsyncResult<Streamer.Callback_BitmapProvider_setCamera> begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setCamera(Ice.AsyncResult r__);

        byte[] getBitmap(float timer, float depthOfField, float transparentColor);
        byte[] getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Streamer.Callback_BitmapProvider_getBitmap> begin_getBitmap(float timer, float depthOfField, float transparentColor);
        Ice.AsyncResult<Streamer.Callback_BitmapProvider_getBitmap> begin_getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getBitmap(float timer, float depthOfField, float transparentColor, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        byte[] end_getBitmap(Ice.AsyncResult r__);
    }
}

namespace Streamer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface BitmapProviderOperations_
    {
        void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, Ice.Current current__);

        byte[] getBitmap(float timer, float depthOfField, float transparentColor, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface BitmapProviderOperationsNC_
    {
        void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az);

        byte[] getBitmap(float timer, float depthOfField, float transparentColor);
    }
}

namespace Streamer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class bytesHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[] v__)
        {
            os__.writeByteSeq(v__);
        }

        public static byte[] read(IceInternal.BasicStream is__)
        {
            byte[] v__;
            v__ = is__.readByteSeq();
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class BitmapProviderPrxHelper : Ice.ObjectPrxHelperBase, BitmapProviderPrx
    {
        #region Synchronous operations

        public byte[] getBitmap(float timer, float depthOfField, float transparentColor)
        {
            return getBitmap(timer, depthOfField, transparentColor, null, false);
        }

        public byte[] getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getBitmap(timer, depthOfField, transparentColor, context__, true);
        }

        private byte[] getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getBitmap");
                    delBase__ = getDelegate__(false);
                    BitmapProviderDel_ del__ = (BitmapProviderDel_)delBase__;
                    return del__.getBitmap(timer, depthOfField, transparentColor, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az)
        {
            setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, null, false);
        }

        public void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, context__, true);
        }

        private void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    BitmapProviderDel_ del__ = (BitmapProviderDel_)delBase__;
                    del__.setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Streamer.Callback_BitmapProvider_getBitmap> begin_getBitmap(float timer, float depthOfField, float transparentColor)
        {
            return begin_getBitmap(timer, depthOfField, transparentColor, null, false, null, null);
        }

        public Ice.AsyncResult<Streamer.Callback_BitmapProvider_getBitmap> begin_getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getBitmap(timer, depthOfField, transparentColor, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getBitmap(float timer, float depthOfField, float transparentColor, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBitmap(timer, depthOfField, transparentColor, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBitmap(timer, depthOfField, transparentColor, ctx__, true, cb__, cookie__);
        }

        private const string __getBitmap_name = "getBitmap";

        public byte[] end_getBitmap(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getBitmap_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            byte[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readByteSeq();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Streamer.Callback_BitmapProvider_getBitmap> begin_getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getBitmap_name);
            IceInternal.TwowayOutgoingAsync<Streamer.Callback_BitmapProvider_getBitmap> result__ =  new IceInternal.TwowayOutgoingAsync<Streamer.Callback_BitmapProvider_getBitmap>(this, __getBitmap_name, getBitmap_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getBitmap_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeFloat(timer);
                os__.writeFloat(depthOfField);
                os__.writeFloat(transparentColor);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getBitmap_completed__(Ice.AsyncResult r__, Streamer.Callback_BitmapProvider_getBitmap cb__, Ice.ExceptionCallback excb__)
        {
            byte[] ret__;
            try
            {
                ret__ = end_getBitmap(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Streamer.Callback_BitmapProvider_setCamera> begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az)
        {
            return begin_setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, null, false, null, null);
        }

        public Ice.AsyncResult<Streamer.Callback_BitmapProvider_setCamera> begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, ctx__, true, cb__, cookie__);
        }

        private const string __setCamera_name = "setCamera";

        public void end_setCamera(Ice.AsyncResult r__)
        {
            end__(r__, __setCamera_name);
        }

        private Ice.AsyncResult<Streamer.Callback_BitmapProvider_setCamera> begin_setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Streamer.Callback_BitmapProvider_setCamera> result__ = new IceInternal.OnewayOutgoingAsync<Streamer.Callback_BitmapProvider_setCamera>(this, __setCamera_name, setCamera_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setCamera_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeFloat(ex);
                os__.writeFloat(ey);
                os__.writeFloat(ez);
                os__.writeFloat(dx);
                os__.writeFloat(dy);
                os__.writeFloat(dz);
                os__.writeFloat(ax);
                os__.writeFloat(ay);
                os__.writeFloat(az);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setCamera_completed__(Streamer.Callback_BitmapProvider_setCamera cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static BitmapProviderPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BitmapProviderPrx r = b as BitmapProviderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BitmapProviderPrxHelper h = new BitmapProviderPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BitmapProviderPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BitmapProviderPrx r = b as BitmapProviderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BitmapProviderPrxHelper h = new BitmapProviderPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BitmapProviderPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BitmapProviderPrxHelper h = new BitmapProviderPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BitmapProviderPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BitmapProviderPrxHelper h = new BitmapProviderPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BitmapProviderPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BitmapProviderPrx r = b as BitmapProviderPrx;
            if(r == null)
            {
                BitmapProviderPrxHelper h = new BitmapProviderPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BitmapProviderPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            BitmapProviderPrxHelper h = new BitmapProviderPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Streamer::BitmapProvider"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new BitmapProviderDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new BitmapProviderDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, BitmapProviderPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static BitmapProviderPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                BitmapProviderPrxHelper result = new BitmapProviderPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Streamer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface BitmapProviderDel_ : Ice.ObjectDel_
    {
        void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> context__);

        byte[] getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace Streamer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class BitmapProviderDelM_ : Ice.ObjectDelM_, BitmapProviderDel_
    {
        public byte[] getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getBitmap", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeFloat(timer);
                    os__.writeFloat(depthOfField);
                    os__.writeFloat(transparentColor);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    byte[] ret__;
                    ret__ = is__.readByteSeq();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setCamera", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeFloat(ex);
                    os__.writeFloat(ey);
                    os__.writeFloat(ez);
                    os__.writeFloat(dx);
                    os__.writeFloat(dy);
                    os__.writeFloat(dz);
                    os__.writeFloat(ax);
                    os__.writeFloat(ay);
                    os__.writeFloat(az);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Streamer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class BitmapProviderDelD_ : Ice.ObjectDelD_, BitmapProviderDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public byte[] getBitmap(float timer, float depthOfField, float transparentColor, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getBitmap", Ice.OperationMode.Normal, context__);
            byte[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BitmapProvider servant__ = null;
                try
                {
                    servant__ = (BitmapProvider)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getBitmap(timer, depthOfField, transparentColor, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "setCamera", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BitmapProvider servant__ = null;
                try
                {
                    servant__ = (BitmapProvider)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace Streamer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class BitmapProviderDisp_ : Ice.ObjectImpl, BitmapProvider
    {
        #region Slice operations

        public void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az)
        {
            setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setCamera(float ex, float ey, float ez, float dx, float dy, float dz, float ax, float ay, float az, Ice.Current current__);

        public byte[] getBitmap(float timer, float depthOfField, float transparentColor)
        {
            return getBitmap(timer, depthOfField, transparentColor, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract byte[] getBitmap(float timer, float depthOfField, float transparentColor, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Streamer::BitmapProvider"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setCamera___(BitmapProvider obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            float ex;
            ex = is__.readFloat();
            float ey;
            ey = is__.readFloat();
            float ez;
            ez = is__.readFloat();
            float dx;
            dx = is__.readFloat();
            float dy;
            dy = is__.readFloat();
            float dz;
            dz = is__.readFloat();
            float ax;
            ax = is__.readFloat();
            float ay;
            ay = is__.readFloat();
            float az;
            az = is__.readFloat();
            is__.endReadEncaps();
            obj__.setCamera(ex, ey, ez, dx, dy, dz, ax, ay, az, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getBitmap___(BitmapProvider obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            float timer;
            timer = is__.readFloat();
            float depthOfField;
            depthOfField = is__.readFloat();
            float transparentColor;
            transparentColor = is__.readFloat();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            byte[] ret__ = obj__.getBitmap(timer, depthOfField, transparentColor, current__);
            os__.writeByteSeq(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "getBitmap",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setCamera"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return getBitmap___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 5:
                {
                    return setCamera___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Streamer::BitmapProvider was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Streamer::BitmapProvider was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}
